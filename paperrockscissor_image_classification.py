# -*- coding: utf-8 -*-
"""PaperRockScissor_Image Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Gw_cJvp7ESlyjvSnRkCU6T6yANyGkd0
"""

# Commented out IPython magic to ensure Python compatibility.
import zipfile
import os
import splitfolders
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dense, Flatten
from tensorflow.keras.layers import Dropout
from tensorflow.keras.optimizers import Adam
import tensorflow as tf

from keras.preprocessing import image
from google.colab import files
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

!wget  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
 -O /tmp/rockpaperscissors.zip

data_zip='/tmp/rockpaperscissors.zip'
zip_ref=zipfile.ZipFile(data_zip,'r')
zip_ref.extractall('/tmp')
zip_ref.close()

dir_data = "/tmp/rockpaperscissors/rps-cv-images"
dir_paper = os.path.join("/tmp/rockpaperscissors/rps-cv-images/paper")
dir_rock = os.path.join("/tmp/rockpaperscissors/rps-cv-images/rock")
dir_scissors = os.path.join("/tmp/rockpaperscissors/rps-cv-images/scissors")

total_data_paper = len(os.listdir(dir_paper))
total_data_rock = len(os.listdir(dir_rock))
total_data_scissors = len(os.listdir(dir_scissors))
print("Jumlah Data Paper     : ",total_data_paper)
print("Jumlah Data Rock      : ",total_data_rock)
print("Jumlah Data Scissors  : ",total_data_scissors)

splitfolders.ratio('/tmp/rockpaperscissors/rps-cv-images',output='/tmp/rockpaperscissors/output_split',ratio=(0.8,0.2))

main_dir='/tmp/rockpaperscissors/output_split'
train_dir=os.path.join(main_dir,'train')
val_dir=os.path.join(main_dir,'val')

os.listdir('/tmp/rockpaperscissors/output_split/train')
os.listdir('/tmp/rockpaperscissors/output_split/val')

train_paper_dir=os.path.join(train_dir,'paper')
train_rock_dir=os.path.join(train_dir,'rock')
train_scissors_dir=os.path.join(train_dir, 'scissors')

validation_paper_dir=os.path.join(val_dir,'paper')
validation_rock_dir=os.path.join(val_dir,'rock')
validation_scissors_dir=os.path.join(val_dir,'scissors')

train_datagen=ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='nearest'
     )
test_datagen=ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode='nearest'
    )

train_generator=train_datagen.flow_from_directory(
    train_dir,
    target_size=(150,150),
    batch_size=4,
    class_mode='categorical',
)
validation_generator=test_datagen.flow_from_directory(
    val_dir,
    target_size=(150,150),
    batch_size=4,
    class_mode='categorical'
)

Model=tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512,activation='relu'),
    tf.keras.layers.Dense(3,activation='sigmoid')
])

Adam(learning_rate=0.00146,name='Adam')
Model.compile(loss='categorical_crossentropy',
              optimizer='Adam',
              metrics=['accuracy'])
Model.summary()

class stopTraining(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') >0.92 and logs.get('val_accuracy') >0.92):  
      print('\n Akurasi pada Training Set dan Validation Set sudah mencapai 92%')
      self.model.stop_training = True

custom_callback = stopTraining()

History=Model.fit(
    train_generator,
    steps_per_epoch=25,
    epochs=20,
    validation_data=validation_generator,
    validation_steps=5,
    verbose=2,
    callbacks=custom_callback
)

plt.plot(History.history['accuracy'])
plt.plot(History.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(History.history['loss'])
plt.plot(History.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

uploaded=files.upload()

for fn in uploaded.keys():
  path=fn
  img=image.load_img(path,target_size=(150,150))
  imgplot=plt.imshow(img)
  x=image.img_to_array(img)
  x=np.expand_dims(x,axis=0)

  images=np.vstack([x])
  classes =Model.predict(images, batch_size=10)

  print(fn)
  a=classes[0,0]
  b=classes[0,1]
  c=classes[0,2]
 
if a  ==  1:
   print('PAPER')
elif b  ==  1:
     print('ROCK')
elif c  ==  1:
     print('SCISSORS')